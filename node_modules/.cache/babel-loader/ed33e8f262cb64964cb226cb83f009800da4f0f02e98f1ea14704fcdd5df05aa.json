{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { collection, addDoc, updateDoc, doc, onSnapshot, query, orderBy, where, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nexport const useNotifications = userId => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!userId) return;\n    const q = query(collection(db, 'notifications'), where('userId', '==', userId), orderBy('createdAt', 'desc'));\n    const unsubscribe = onSnapshot(q, snapshot => {\n      const notificationsData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setNotifications(notificationsData);\n      setLoading(false);\n    }, err => {\n      console.error('Error fetching notifications:', err);\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, [userId]);\n  const createNotification = async notificationData => {\n    try {\n      await addDoc(collection(db, 'notifications'), {\n        ...notificationData,\n        createdAt: serverTimestamp(),\n        read: false\n      });\n    } catch (err) {\n      console.error('Error creating notification:', err);\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await updateDoc(doc(db, 'notifications', notificationId), {\n        read: true,\n        readAt: serverTimestamp()\n      });\n    } catch (err) {\n      console.error('Error marking notification as read:', err);\n    }\n  };\n  return {\n    notifications,\n    loading,\n    createNotification,\n    markAsRead\n  };\n};\n_s(useNotifications, \"b5Z8U3/R7VRYC3BVdCsp3rDTxkc=\");","map":{"version":3,"names":["useState","useEffect","collection","addDoc","updateDoc","doc","onSnapshot","query","orderBy","where","serverTimestamp","db","useNotifications","userId","_s","notifications","setNotifications","loading","setLoading","q","unsubscribe","snapshot","notificationsData","docs","map","id","data","err","console","error","createNotification","notificationData","createdAt","read","markAsRead","notificationId","readAt"],"sources":["C:/Users/1005598/OneDrive - Loudoun County Public Schools/Documents/Self-Projects/Hackathon/src/hooks/useNotifications.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { \r\n  collection, \r\n  addDoc, \r\n  updateDoc,\r\n  doc,\r\n  onSnapshot, \r\n  query, \r\n  orderBy, \r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\nexport const useNotifications = (userId) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    const q = query(\r\n      collection(db, 'notifications'),\r\n      where('userId', '==', userId),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(q, \r\n      (snapshot) => {\r\n        const notificationsData = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n        setNotifications(notificationsData);\r\n        setLoading(false);\r\n      },\r\n      (err) => {\r\n        console.error('Error fetching notifications:', err);\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return () => unsubscribe();\r\n  }, [userId]);\r\n\r\n  const createNotification = async (notificationData) => {\r\n    try {\r\n      await addDoc(collection(db, 'notifications'), {\r\n        ...notificationData,\r\n        createdAt: serverTimestamp(),\r\n        read: false\r\n      });\r\n    } catch (err) {\r\n      console.error('Error creating notification:', err);\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await updateDoc(doc(db, 'notifications', notificationId), {\r\n        read: true,\r\n        readAt: serverTimestamp()\r\n      });\r\n    } catch (err) {\r\n      console.error('Error marking notification as read:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    loading,\r\n    createNotification,\r\n    markAsRead\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACEC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,GAAG,EACHC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,eAAe,QACV,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,oBAAoB;AAEvC,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,MAAM,EAAE;IAEb,MAAMM,CAAC,GAAGZ,KAAK,CACbL,UAAU,CAACS,EAAE,EAAE,eAAe,CAAC,EAC/BF,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEI,MAAM,CAAC,EAC7BL,OAAO,CAAC,WAAW,EAAE,MAAM,CAC7B,CAAC;IAED,MAAMY,WAAW,GAAGd,UAAU,CAACa,CAAC,EAC7BE,QAAQ,IAAK;MACZ,MAAMC,iBAAiB,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACnB,GAAG,KAAK;QAClDoB,EAAE,EAAEpB,GAAG,CAACoB,EAAE;QACV,GAAGpB,GAAG,CAACqB,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;MACHV,gBAAgB,CAACM,iBAAiB,CAAC;MACnCJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EACAS,GAAG,IAAK;MACPC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;MACnDT,UAAU,CAAC,KAAK,CAAC;IACnB,CACF,CAAC;IAED,OAAO,MAAME,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,MAAMiB,kBAAkB,GAAG,MAAOC,gBAAgB,IAAK;IACrD,IAAI;MACF,MAAM5B,MAAM,CAACD,UAAU,CAACS,EAAE,EAAE,eAAe,CAAC,EAAE;QAC5C,GAAGoB,gBAAgB;QACnBC,SAAS,EAAEtB,eAAe,CAAC,CAAC;QAC5BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAON,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;IACpD;EACF,CAAC;EAED,MAAMO,UAAU,GAAG,MAAOC,cAAc,IAAK;IAC3C,IAAI;MACF,MAAM/B,SAAS,CAACC,GAAG,CAACM,EAAE,EAAE,eAAe,EAAEwB,cAAc,CAAC,EAAE;QACxDF,IAAI,EAAE,IAAI;QACVG,MAAM,EAAE1B,eAAe,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;IAC3D;EACF,CAAC;EAED,OAAO;IACLZ,aAAa;IACbE,OAAO;IACPa,kBAAkB;IAClBI;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CA5DWF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}