{"ast":null,"code":"// Location service for geolocation and proximity calculations\nexport class LocationService {\n  constructor() {\n    this.userLocation = null;\n    this.watchId = null;\n  }\n\n  // Get user's current location\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation is not supported by this browser'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        this.userLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        };\n        resolve(this.userLocation);\n      }, error => {\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5 minutes\n      });\n    });\n  }\n\n  // Watch user's location for changes\n  watchLocation(callback) {\n    if (!navigator.geolocation) {\n      throw new Error('Geolocation is not supported by this browser');\n    }\n    this.watchId = navigator.geolocation.watchPosition(position => {\n      this.userLocation = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        accuracy: position.coords.accuracy\n      };\n      callback(this.userLocation);\n    }, error => {\n      console.error('Location watch error:', error);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 60000 // 1 minute\n    });\n  }\n\n  // Stop watching location\n  stopWatching() {\n    if (this.watchId) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n  }\n\n  // Calculate distance between two points in miles\n  calculateDistance(lat1, lng1, lat2, lng2) {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLng = this.toRadians(lng2 - lng1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Find nearby water bodies within specified radius (in miles)\n  findNearbyWaterBodies(waterBodies, userLat, userLng, radiusMiles = 10) {\n    return waterBodies.map(waterBody => ({\n      ...waterBody,\n      distance: this.calculateDistance(userLat, userLng, waterBody.coords[0], waterBody.coords[1])\n    })).filter(waterBody => waterBody.distance <= radiusMiles).sort((a, b) => a.distance - b.distance);\n  }\n\n  // Get activity recommendations based on water status\n  getActivityRecommendations(status) {\n    const recommendations = {\n      safe: {\n        swimming: {\n          allowed: true,\n          message: \"Swimming is safe and recommended\"\n        },\n        boating: {\n          allowed: true,\n          message: \"Boating is safe\"\n        },\n        fishing: {\n          allowed: true,\n          message: \"Fishing is safe\"\n        },\n        kayaking: {\n          allowed: true,\n          message: \"Kayaking and paddling are safe\"\n        },\n        wading: {\n          allowed: true,\n          message: \"Wading is safe\"\n        }\n      },\n      caution: {\n        swimming: {\n          allowed: false,\n          message: \"Swimming not recommended - monitor conditions\"\n        },\n        boating: {\n          allowed: true,\n          message: \"Boating is generally safe\"\n        },\n        fishing: {\n          allowed: true,\n          message: \"Fishing is safe\"\n        },\n        kayaking: {\n          allowed: true,\n          message: \"Kayaking is safe\"\n        },\n        wading: {\n          allowed: false,\n          message: \"Avoid wading - conditions may be unsafe\"\n        }\n      },\n      warning: {\n        swimming: {\n          allowed: false,\n          message: \"Swimming is not recommended\"\n        },\n        boating: {\n          allowed: true,\n          message: \"Boating is safe but avoid contact with water\"\n        },\n        fishing: {\n          allowed: true,\n          message: \"Fishing is safe but avoid contact with water\"\n        },\n        kayaking: {\n          allowed: false,\n          message: \"Kayaking not recommended\"\n        },\n        wading: {\n          allowed: false,\n          message: \"Wading is not recommended\"\n        }\n      },\n      unsafe: {\n        swimming: {\n          allowed: false,\n          message: \"Swimming is prohibited\"\n        },\n        boating: {\n          allowed: false,\n          message: \"Boating is not recommended\"\n        },\n        fishing: {\n          allowed: false,\n          message: \"Fishing is not recommended\"\n        },\n        kayaking: {\n          allowed: false,\n          message: \"Kayaking is prohibited\"\n        },\n        wading: {\n          allowed: false,\n          message: \"Wading is prohibited\"\n        }\n      }\n    };\n    return recommendations[status] || recommendations.safe;\n  }\n\n  // Get safety tips based on water status\n  getSafetyTips(status) {\n    const tips = {\n      safe: [\"Always swim with a buddy\", \"Check weather conditions before going out\", \"Wear appropriate safety gear\"],\n      caution: [\"Avoid contact with water if possible\", \"Monitor conditions closely\", \"Consider postponing water activities\"],\n      warning: [\"Avoid all water contact\", \"Keep pets away from water\", \"Do not drink or use water for cooking\"],\n      unsafe: [\"Stay away from water completely\", \"Do not allow children or pets near water\", \"Contact local authorities if you see people in water\"]\n    };\n    return tips[status] || tips.safe;\n  }\n}\nexport const locationService = new LocationService();","map":{"version":3,"names":["LocationService","constructor","userLocation","watchId","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","lat","coords","latitude","lng","longitude","accuracy","error","enableHighAccuracy","timeout","maximumAge","watchLocation","callback","watchPosition","console","stopWatching","clearWatch","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","findNearbyWaterBodies","waterBodies","userLat","userLng","radiusMiles","map","waterBody","distance","filter","sort","b","getActivityRecommendations","status","recommendations","safe","swimming","allowed","message","boating","fishing","kayaking","wading","caution","warning","unsafe","getSafetyTips","tips","locationService"],"sources":["C:/Users/1005598/OneDrive - Loudoun County Public Schools/Documents/Self-Projects/Hackathon/src/services/locationService.js"],"sourcesContent":["// Location service for geolocation and proximity calculations\r\nexport class LocationService {\r\n  constructor() {\r\n    this.userLocation = null;\r\n    this.watchId = null;\r\n  }\r\n\r\n  // Get user's current location\r\n  async getCurrentLocation() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation is not supported by this browser'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          this.userLocation = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n            accuracy: position.coords.accuracy\r\n          };\r\n          resolve(this.userLocation);\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 300000 // 5 minutes\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  // Watch user's location for changes\r\n  watchLocation(callback) {\r\n    if (!navigator.geolocation) {\r\n      throw new Error('Geolocation is not supported by this browser');\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        this.userLocation = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n          accuracy: position.coords.accuracy\r\n        };\r\n        callback(this.userLocation);\r\n      },\r\n      (error) => {\r\n        console.error('Location watch error:', error);\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000 // 1 minute\r\n      }\r\n    );\r\n  }\r\n\r\n  // Stop watching location\r\n  stopWatching() {\r\n    if (this.watchId) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  // Calculate distance between two points in miles\r\n  calculateDistance(lat1, lng1, lat2, lng2) {\r\n    const R = 3959; // Earth's radius in miles\r\n    const dLat = this.toRadians(lat2 - lat1);\r\n    const dLng = this.toRadians(lng2 - lng1);\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * \r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  toRadians(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  // Find nearby water bodies within specified radius (in miles)\r\n  findNearbyWaterBodies(waterBodies, userLat, userLng, radiusMiles = 10) {\r\n    return waterBodies\r\n      .map(waterBody => ({\r\n        ...waterBody,\r\n        distance: this.calculateDistance(userLat, userLng, waterBody.coords[0], waterBody.coords[1])\r\n      }))\r\n      .filter(waterBody => waterBody.distance <= radiusMiles)\r\n      .sort((a, b) => a.distance - b.distance);\r\n  }\r\n\r\n  // Get activity recommendations based on water status\r\n  getActivityRecommendations(status) {\r\n    const recommendations = {\r\n      safe: {\r\n        swimming: { allowed: true, message: \"Swimming is safe and recommended\" },\r\n        boating: { allowed: true, message: \"Boating is safe\" },\r\n        fishing: { allowed: true, message: \"Fishing is safe\" },\r\n        kayaking: { allowed: true, message: \"Kayaking and paddling are safe\" },\r\n        wading: { allowed: true, message: \"Wading is safe\" }\r\n      },\r\n      caution: {\r\n        swimming: { allowed: false, message: \"Swimming not recommended - monitor conditions\" },\r\n        boating: { allowed: true, message: \"Boating is generally safe\" },\r\n        fishing: { allowed: true, message: \"Fishing is safe\" },\r\n        kayaking: { allowed: true, message: \"Kayaking is safe\" },\r\n        wading: { allowed: false, message: \"Avoid wading - conditions may be unsafe\" }\r\n      },\r\n      warning: {\r\n        swimming: { allowed: false, message: \"Swimming is not recommended\" },\r\n        boating: { allowed: true, message: \"Boating is safe but avoid contact with water\" },\r\n        fishing: { allowed: true, message: \"Fishing is safe but avoid contact with water\" },\r\n        kayaking: { allowed: false, message: \"Kayaking not recommended\" },\r\n        wading: { allowed: false, message: \"Wading is not recommended\" }\r\n      },\r\n      unsafe: {\r\n        swimming: { allowed: false, message: \"Swimming is prohibited\" },\r\n        boating: { allowed: false, message: \"Boating is not recommended\" },\r\n        fishing: { allowed: false, message: \"Fishing is not recommended\" },\r\n        kayaking: { allowed: false, message: \"Kayaking is prohibited\" },\r\n        wading: { allowed: false, message: \"Wading is prohibited\" }\r\n      }\r\n    };\r\n\r\n    return recommendations[status] || recommendations.safe;\r\n  }\r\n\r\n  // Get safety tips based on water status\r\n  getSafetyTips(status) {\r\n    const tips = {\r\n      safe: [\r\n        \"Always swim with a buddy\",\r\n        \"Check weather conditions before going out\",\r\n        \"Wear appropriate safety gear\"\r\n      ],\r\n      caution: [\r\n        \"Avoid contact with water if possible\",\r\n        \"Monitor conditions closely\",\r\n        \"Consider postponing water activities\"\r\n      ],\r\n      warning: [\r\n        \"Avoid all water contact\",\r\n        \"Keep pets away from water\",\r\n        \"Do not drink or use water for cooking\"\r\n      ],\r\n      unsafe: [\r\n        \"Stay away from water completely\",\r\n        \"Do not allow children or pets near water\",\r\n        \"Contact local authorities if you see people in water\"\r\n      ]\r\n    };\r\n\r\n    return tips[status] || tips.safe;\r\n  }\r\n}\r\n\r\nexport const locationService = new LocationService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}